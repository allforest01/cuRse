qt(0.975, df=length(rocket$streng)-2)*se # Khoảng tin cậy
# (j) Khoảng dự báo cho lực đẩy khi age=20
pred <- coef(lm(streng ~ age, data=rocket))[1] +
coef(lm(streng ~ age, data=rocket))[2]*20
se <- sqrt(o2*(1 + 20^2)) # Sai số chuẩn của dự báo
qt(0.975, df=length(rocket$streng)-2)*se # Khoảng dự báo
# (k) Phân tích thặng dư
plot(lm(streng ~ age, data=rocket), which=2)
plot(lm(streng ~ age, data=rocket), which=3)
attach(data)
# ------------ Bài 4 ------------
data <- read.csv("../data/rocket.motor.csv")
attach(data)
# ------------ Bài 4 ------------
data <- read.csv("../data/rocket.motor.csv")
attach(data)
plot(age, strengh)
plot(age, streng)
abline(lm(streng ~ age))
abline(lm(streng ~ age), col = "blue"))
abline(lm(streng ~ age), col = "blue"))
abline(lm(streng ~ age), col = "blue")
result = lm(streng ~ age))
abline(result, col = "blue")
result = lm(streng ~ age)
abline(result, col = "blue")
# Cau b
B0 = coef(result)[0]
B1 = coef(result)[1]
# Cau b
B0 = coef(result)[1]
B1 = coef(result)[2]
model = lm(streng ~ age)
abline(result, col = "blue")
model = lm(streng ~ age)
abline(model, col = "blue")
# Cau b
B0 = coef(result)[1]
B1 = coef(result)[2]
# Cau c
estimated_strength = B0 + B1 * 20
# Cau b
B0 = coef(result)[1]; B0
B1 = coef(result)[2]; B1
# Cau c
estimated_strength = B0 + B1 * 20; estimated_strength
# Cau c
estimated_strength = predcit(model, data.frame(age = 20)); estimated_strength
# Cau c
estimated_strength = predict(model, data.frame(age = 20)); estimated_strength
B0 + B1 * 20
# Cau d
predicted_strength = predict(model, data.frame$age); predicted_strength
# Cau d
predicted_strength = predict(model, data.frame); predicted_strength
# Cau d
predicted_strength = predict(model, data.frame$age(age)); predicted_strength
# Cau d
predicted_strength = predict(model, data.frame$age = age); predicted_strength
# Cau d
predicted_strength = predict(model, data.frame(age = age)); predicted_strength
# Cau c
estimated_strength = B0 + B1 * 20; estimated_strength
# Cau d
estimated_strengths = predict(model, data.frame(age = age)); predicted_strengths
# Cau c
estimated_strengh = B0 + B1 * 20; estimated_strengh
# Cau d
estimated_strenghs = predict(model, data.frame(age = age)); predicted_strenghs
# Cau d
estimated_strenghs = predict(model, data.frame(age = age)); estimated_strenghs
# ------------ Bài 4 ------------
# Cau a
data <- read.csv("../data/rocket.motor.csv")
attach(data)
# Cau c
estimated_strengh = B0 + B1 * 20; estimated_strengh
# Cau b
B0 = coef(result)[1]; B0
B1 = coef(result)[2]; B1
model = lm(streng ~ age)
abline(model, col = "blue")
# Cau b
B0 = coef(result)[1]; B0
B1 = coef(result)[2]; B1
# Cau c
estimated_strengh = B0 + B1 * 20; estimated_strengh
plot(age, streng)
model = lm(streng ~ age)
abline(model, col = "blue")
# Cau b
B0 = coef(result)[1]; B0
B1 = coef(result)[2]; B1
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
# Cau c
estimated_strengh = B0 + B1 * 20; estimated_strengh
# Cau d
estimated_strenghs = predict(model, data.frame(age = age)); estimated_strenghs
# Cau c
estimated_streng = B0 + B1 * 20; estimated_streng
# Cau d
estimated_streng = predict(model, data.frame(age = age)); estimated_strengs
# Cau d
estimated_strengs = predict(model, data.frame(age = age)); estimated_strengs
# Cau c
estimated_streng = B0 + B1 * 20; estimated_streng
# Cau d
estimated_strengs = predict(model, data.frame(age = age)); estimated_strengs
# ------------ Bài 4 ------------
# Cau a
data <- read.csv("../data/rocket.motor.csv")
attach(data)
plot(age, streng)
model = lm(streng ~ age)
abline(model, col = "blue")
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
# Cau c
estimated_streng = B0 + B1 * 20; estimated_streng
# Cau d
estimated_strengs = predict(model, data.frame(age = age)); estimated_strengs
plot(estimated_strengs, streng))
plot(estimated_strengs, streng)
qqnorm(model$residuals)
plot(estimated_strengs, streng)
abline(model, col = "blue")
plot(estimated_strengs, streng)
abline(model, col = "blue")
model = lm(streng ~ age)
abline(model, col = "blue")
plot(age, streng)
abline(model, col = "blue")
plot(estimated_strengs, streng)
qqnorm(model)
model = lm(streng ~ age)
qqnorm(model)
plot(age, streng)
qqnorm(model)
# ------------ Bài 4 ------------
# Cau a
data <- read.csv("../data/rocket.motor.csv")
attach(data)
plot(age, streng)
model = lm(streng ~ age)
abline(model, col = "blue")
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
# Cau c
estimated_streng = B0 + B1 * 20; estimated_streng
# Cau d
estimated_strengs = predict(model, data.frame(age = age)); estimated_strengs
qqnorm(model)
qqline(model)
model = lm(streng ~ age)
qqline(model)
qqline(model)
model = lm(streng ~ age)
qqline(model)
qqnorm(model)
qqline(model)
par(mfrow=c(1,2))
plot(age, streng)
qqnorm(model)
plot(age, streng)
plot(estimated_strengs, streng)
abline(lm(estimated_strengs ~ streng))
abline(lm(estimated_strengs ~ streng), col = "red")
~
plot(streng, estimated_strengs)
abline(lm(estimated_strengs ~ streng), col = "red")
~
abline(lm(streng ~ estimated_strengs), col = "blue")
abline(lm(estimated_strengs ~ streng), col = "red")
abline(lm(streng ~ estimated_strengs), col = "blue")
plot(streng, estimated_strengs)
abline(lm(estimated_strengs ~ streng), col = "red")
summary(model)
# Cau e
MSE = sum(resid(model) ^ 2) / (n - 2)
# Cau e
n = length(x)
# Cau e
n = length(age)
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x-mean(x))^2)
Sxx = sum((x - mean(x)) ^ 2)
Sxx = sum((age - mean(age)) ^ 2)
x = age
y = streng
plot(x, y)
model = lm(y ~ x)
abline(model, col = "blue")
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
# Cau c
estimated_y = B0 + B1 * 20; estimated_y
# Cau d
estimated_ys = predict(model, data.frame(age = age)); estimated_ys
plot(y, estimated_ys)
# Cau c
B0 + B1 * 20
# Cau d
estimated_y = predict(model, data.frame(age = age)); estimated_ys
# Cau d
estimated_y = predict(model, data.frame(age = age)); estimated_y
plot(y, estimated_y)
abline(lm(estimated_y ~ y), col = "red")
summary(model)
# Cau e
n = length(age)
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x - mean(x)) ^ 2)
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x - mean(x)) ^ 2)
t = (B1 - (-30)) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
# Cau f
t = (B0 - (0)) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
# Cau g
t = (B0 - 2500) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
# Cau g
t = (B0 - 2500) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(t > qt(1 - alpha, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 1 - pt(t, n - 2); p_value
p_value = pt(t, n - 2); p_value
p_value = 2 * pt(t, n - 2); p_value
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau e
n = length(age)
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x - mean(x)) ^ 2)
t = (B1 - (-30)) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = pt(t, n - 2); p_value
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(t > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = pt(t, n - 2); p_value
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau g
t = (B0 - 2500) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(t > qt(1 - alpha, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 1 - pt(t, n - 2); p_value
t = (B1 - (-30)) / sqrt(MSE / Sxx)
# Cau f
t = (B0 - 0) / sqrt(MSE(1 / n + (mean(x) ^ 2) / Sxx))
# Cau f
t = (B0 - 0) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
# Cau g
t = (B0 - 2500) / sqrt(MSE(1 / n + (mean(x) ^ 2) / Sxx))
# Cau g
t = (B0 - 2500) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
# Cau f
t = (B0 - 0) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau g
t = (B0 - 2500) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
alpha = 0.01
ifelse(t > qt(1 - alpha, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 1 - pt(t, n - 2); p_value
detach(data)
# Cau f
t = (B0 - 0) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
# Cau g
t = (B0 - 2500) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
# Cau f
t = (B0 - 0) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau g
t = (B0 - 2500) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
alpha = 0.01
ifelse(t > qt(1 - alpha, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 1 - pt(t, n - 2); p_value
detach(data)
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
ci = c(can.duoi = b1 - eps, can.tren = b1 + eps); ci
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x - mean(x)) ^ 2)
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
# Cau h
alpha = 0.05
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
ci = c(can.duoi = b1 – eps, can.tren = b1 + eps); ci
# Cau h
MSE = sum( res^2 ) / (n-2)
Sxx = sum((x-mean(x))^2)
eps = qt(1-0.05/2,n-2)*sqrt(MSE/Sxx) #sai số ước lượng
ci = c(can.duoi = b1 – eps, can.tren = b1 + eps); ci
eps = qt(1-0.05/2,n-2)*sqrt(MSE/Sxx)
ci = c(can.duoi = B1 – eps, can.tren = B1 + eps); ci
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
# Cau h
alpha = 0.05
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
eps = qt(1 - alpha / 2, n - 2) * sqrt(sq_sigma * (1 + 1 / n + (mean(x) - x0) ^ 2 / Sxx))
sq_sigma = SSE / (n - 2)
x0 = 20
eps = qt(1 - alpha / 2, n - 2) * sqrt(sq_sigma * (1 + 1 / n + (mean(x) - x0) ^ 2 / Sxx))
sq_sigma = SSE / (n - 2)
SSE = sum((y - estimated_y) ^ 2)
# SSE = sum((y - estimated_y) ^ 2)
SSE = sum(model$residuals ^ 2))
# SSE = sum((y - estimated_y) ^ 2)
SSE = sum(model$residuals ^ 2)
sq_sigma = SSE / (n - 2)
x0 = 20
eps = qt(1 - alpha / 2, n - 2) * sqrt(sq_sigma * (1 + 1 / n + (mean(x) - x0) ^ 2 / Sxx))
ci = c(can.duoi = B0 + B1 * x0 - eps, can.tren = B0 + B1 * x0 + eps); ci
plot(x, y)
ci = c(can.duoi = y0 - eps, can.tren = y0 + eps); ci
y0 = B0 + B1 * x0
ci = c(can.duoi = y0 - eps, can.tren = y0 + eps); ci
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE * (1 + 1 / n + (mean(x) - x0) ^ 2 / Sxx))
ci = c(can.duoi = y0 - eps, can.tren = y0 + eps); ci
# Cau i
alpha = 0.05
x0 = 20
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE * (1 / n + (mean(x) - x0) ^ 2 / Sxx))
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / sum((x - mean(x))^2))
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * SSE / Sxx
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / Sxx
# Cau j
alpha = 0.05
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / Sxx
# Cau j
alpha = 0.05
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
(sum(residuals(model) * (x - mean(x))) / Sxx)
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x))) / Sxx)
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
B1 = coef(model)[2]; B1
B1 = (sum(residuals(model) * (x - mean(x))) / Sxx); B1
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x) ^ 2)) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x) ^ 2)) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x)) ^ 2)) / Sxx)
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x)) ^ 2) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * (sum(residuals(model) * (x - mean(x)) ^ 2) / Sxx)
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
mean
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
# Cau k
par(mfrow=c(1, 2))
plot(x, resid(model))
abline(h = 0, col = "red")
abline(h = 0, lty = 3)
# Cau k
par(mfrow=c(1, 2))
plot(x, resid(model))
abline(h = 0, lty = 3)
qqnorm(model)
qqnorm(lm(y ~ x))
x = c(18,23,25,35,65,54,34,56,72,19,23,42,18,39,37) #nhập dữ liệu
y = c(202,186,187,180,156,169,174,172,153,199,193,174,198,183,178)
result = lm(y ~ x)
par(mfrow=c(1,2)) #chuẩn bị vẽ hai đồ thị trên 1 cửa sổ
plot(result$fitted.values,resid(result),xlab ='Fitted values',
ylab ='Residuals', main = 'Residuals vs Fitted')
#đồ thị thặng dư theo giá trị hồi quy
abline(h=0,lty=3) #đường thẳng y = 0 với nét chấm
qqnorm(res) #đồ thị Normal Q-Q
qqline(res) #đường thẳng lí thuyết trên đồ thị Normal Q-Q
qqnorm(result) #đồ thị Normal Q-Q
qqline(result) #đường thẳng lí thuyết trên đồ thị Normal Q-Q
x = c(18,23,25,35,65,54,34,56,72,19,23,42,18,39,37) #nhập dữ liệu
y = c(202,186,187,180,156,169,174,172,153,199,193,174,198,183,178)
result = lm(y ~ x)
par(mfrow=c(1,2)) #chuẩn bị vẽ hai đồ thị trên 1 cửa sổ
plot(result$fitted.values,resid(result),xlab ='Fitted values',
ylab ='Residuals', main = 'Residuals vs Fitted')
#đồ thị thặng dư theo giá trị hồi quy
abline(h=0,lty=3) #đường thẳng y = 0 với nét chấm
qqnorm(result) #đồ thị Normal Q-Q
qqline(result) #đường thẳng lí thuyết trên đồ thị Normal Q-Q
qqnorm(lm(y ~ x))
# Cau k
par(mfrow=c(1, 2))
plot(x, resid(model))
abline(h = 0, lty = 3)
lm(y ~ x)
lm(round(y) ~ round(x))
qqnorm(lm(round(y) ~ round(x)))
lm(y ~ x)
# Cau k
par(mfrow=c(1, 2))
plot(x, resid(model))
abline(h = 0, lty = 3)
# ------------ Bài 4 ------------
# Cau a
data <- read.csv("../data/rocket.motor.csv")
attach(data)
x = age
y = streng
plot(x, y)
model = lm(y ~ x)
abline(model, col = "blue")
# Cau b
B0 = coef(model)[1]; B0
B1 = coef(model)[2]; B1
# Cau c
B0 + B1 * 20
# Cau d
estimated_y = predict(model, data.frame(age = age)); estimated_y
plot(y, estimated_y)
abline(lm(estimated_y ~ y), col = "red")
summary(model)
# Cau e
n = length(age)
MSE = sum(resid(model) ^ 2) / (n - 2)
Sxx = sum((x - mean(x)) ^ 2)
t = (B1 - (-30)) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau f
t = (B0 - 0) / sqrt(MSE / Sxx)
alpha = 0.01
ifelse(abs(t) > qt(1 - alpha / 2, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 2 * (1 - pt(abs(t), n - 2)); p_value
# Cau g
t = (B0 - 2500) / sqrt(MSE * (1 / n + (mean(x) ^ 2) / Sxx))
alpha = 0.01
ifelse(t > qt(1 - alpha, n - 2), "Bác bỏ H0", "Chấp nhận H0")
p_value = 1 - pt(t, n - 2); p_value
# Cau h
alpha = 0.05
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE / Sxx)
ci = c(can.duoi = B1 - eps, can.tren = B1 + eps); ci
# Cau i
alpha = 0.05
x0 = 20
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE * (1 / n + (mean(x) - x0) ^ 2 / Sxx))
predicted_mean = mean(y) + (x0 - mean(x)) * B1
ci = c(can.duoi = predicted_mean - eps, can.tren = predicted_mean + eps); ci
# Cau j
alpha = 0.05
# SSE = sum((y - estimated_y) ^ 2)
SSE = sum(model$residuals ^ 2)
x0 = 20
y0 = B0 + B1 * x0
eps = qt(1 - alpha / 2, n - 2) * sqrt(MSE * (1 + 1 / n + (mean(x) - x0) ^ 2 / Sxx))
ci = c(can.duoi = y0 - eps, can.tren = y0 + eps); ci
# Cau k
par(mfrow=c(1, 2))
plot(x, resid(model))
abline(h = 0, lty = 3)
detach(data)
