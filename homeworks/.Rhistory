return sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
}
return(sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
return(sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
return(sqrt(1/(n - 1) * sum((x - mean(x))^2)))
s(x)
install.packages("pacman")
# Câu 3
s(x)
n <- 72
# Câu 1: Tạo vector x chứa giá trị từ 1 đến n
x <- 1:n
return(sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
n <- 72
# Câu 1: Tạo vector x chứa giá trị từ 1 đến n
x <- 1:n
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) {
return(sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
}
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) {
return(sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
}
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
return
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) (sqrt(1/(length(x) - 1) * sum((x - mean(x))^2)))
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
source("~/cuRse/courseworks/KT1-Ca1-22120172.R")
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
# Mai Văn Tuấn Kiệt - 22120172
n <- 72
# Câu 1: Tạo vector x chứa giá trị từ 1 đến n
x <- 1:n
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
# Câu 3: Chạy function s(x) với x là vector chứa giá trị từ 1 đến n
print(s(x))
print(x)
# Câu 2: Tạo function s(x) tính độ lệch chuẩn của x
s <- function(x) sqrt(1/(length(x) - 1) * sum((x - mean(x))^2))
source("~/cuRse/courseworks/KT1-Ca1-22120172.R")
source("~/cuRse/courseworks/KT1-Ca1-22120172.R")
source("~/cuRse/courseworks/KT1-Ca1-22120172.R")
source("~/cuRse/courseworks/KT1-Ca1-22120172.R")
size = 2 + 1
prob = size / (2 * size + 1)
binomial(size, prob)
size = 2 + 1
prob = size / (2 * size + 1)
print(rbinom(1, size, prob))
print(rbinom(size, 1,prob))
print(rbinom(size, 1, prob))
print(rbinom(size, 1, prob))
print(rbinom(n, size, prob))
print(rbinom(n, size, prob))
X = rbinom(n, size, prob)
yn <- sqrt(n) * (median(X) - size * prob) / sqrt(size * prob * (1 - prob))
yn
library(ggplot2)
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from N(0,1)", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
random_samples = rbinom(n, size, prob)
yn <- sqrt(n) * (median(X) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from N(0,1)", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
n = 20
random_samples = rbinom(n, size, prob)
yn <- sqrt(n) * (median(X) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from N(0,1)", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
n <- 20
# Tạo mẫu ngẫu nhiên từ phân phối nhị thức
random_samples <- rbinom(n, size, prob)
# Tính giá trị thống kê yn
yn <- sqrt(n) * (median(random_samples) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from Binomial Distribution", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
n <- 100
# Tạo mẫu ngẫu nhiên từ phân phối nhị thức
random_samples <- rbinom(n, size, prob)
# Tính giá trị thống kê yn
yn <- sqrt(n) * (median(random_samples) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from Binomial Distribution", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
n <- 100
# Tạo mẫu ngẫu nhiên từ phân phối nhị thức
random_samples <- rbinom(n, size, prob)
# Tính giá trị thống kê yn
yn <- sqrt(n) * (median(random_samples) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from Binomial Distribution", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
hist(yn(n),freq=0,breaks=40)
curve(dnorm(x,mu,sigma/sqrt(n)),col="blue",lty=1,lwd=2,add=TRUE)
# Vẽ biểu đồ histogram
hist(random_samples, main = "Histogram of Random Samples from Binomial Distribution", col = "lightblue", border = "black", probability = TRUE)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
size <- 2 + 1
prob <- size / (2 * size + 1)
n <- 20
# Tạo mẫu ngẫu nhiên từ phân phối nhị thức
random_samples <- rbinom(n, size, prob)
# Tính giá trị thống kê yn
yn <- sqrt(n) * (median(random_samples) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
# Tạo mẫu ngẫu nhiên từ phân phối nhị thức
random_samples <- rbinom(n, size, prob)
# Tính giá trị thống kê yn
yn <- sqrt(n) * (median(random_samples) - size * prob) / sqrt(size * prob * (1 - prob))
# Vẽ đường phân phối chuẩn
curve(dnorm(x, mean = 0, sd = 1), add = TRUE, col = "red", lwd = 2)
# Vẽ đường dọc màu xanh lá cây tại giá trị của yn
abline(v = yn, col = "green", lty = 2)
size <- 2 + 1
prob <- size / (2 * size + 1)
n <- 20
Y<-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n=1000
m=10000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
m=1000
n=100
m=1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
n <- 30
Y<-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n=100
m=1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
n <- 30
Y<-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 100
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
Y <- function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
x <- rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
Y <- function(n) {
x <- rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 100
m <- 1000
hist(vecY(m),freq=0,breaks=50)
prob <- size / (2 * size + 1)
n <- 30
Y <- function(n) {
x <- rbinom(n,size,prob)
((mean(x) - size * prob) * sqrt(n)) / sqrt(size * prob * (1 - prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 100
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
n <- 1200
m <- 10000
n <- 1200
m <- 10000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
n <- 30
Y <-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 1200
m <- 10000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
00
00
n <- 30
Y <-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 100
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
size <- 6
prob <- size / (2 * size + 1)
n <- 30
Y <-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 100
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
n <- 1000
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
size <- 6
prob <- size / (2 * size + 1)
n <- 30
Y <-function(n) {
x<-rbinom(n,size,prob)
((mean(x)-size*prob)*sqrt(n))/sqrt(size*prob*(1-prob))
}
vecY<-function(m) replicate(m,Y(n))
n <- 1000
m <- 1000
hist(vecY(m),freq=0,breaks=50)
curve(dnorm(x),col="blue",lty=1,lwd=2,add=TRUE)
# Cau a:
data <- read.csv("profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "red", breaks = 10)
# Cau a:
data <- read.csv("./profit.csv")
# Cau a:
data <- read.csv("./profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "red", breaks = 10)
ls
exists()
# Cau a:
data <- read.csv("./profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "red", breaks = 10)
# Cau a:
getwd()
# Cau a:
setwd(file.path())
# Cau a:
current_script_path <- file.path(dirname(rstudioapi::getActiveDocumentContext()$path), "")
# Cau a:
here
# Cau a:
here()
# Cau a:
library(here)
here()
# Cau a:
current_script_path <- dirname(sys.frame(1)$ofile)
# Cau a:
current_script_path <- dirname(sys.frame(0)$ofile)
data <- read.csv("/curSe/22120172/profit.csv")
setwd(./cuRse/22120172)
setwd("./cuRse/22120172")
data <- read.csv("profit.csv")
View(data)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "red", breaks = 10)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", col = "blue", border = "red", breaks = 10)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", col = "blue", border = "red", breaks = 10)
hist(data$profit, main = "Histogram of profit", ylab = "Profit", col = "blue", border = "red", breaks = 10)
, ylab = "Frequency"
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "red", breaks = 10)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "black", breaks = 10)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "blue", border = "black", breaks = 10)
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "yellow", border = "black", breaks = 10)
data <- read.csv("./data/profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "yellow", border = "black", breaks = 10)
data <- read.csv("./dataset/profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "yellow", border = "black", breaks = 10)
data <- read.csv("./datasets/profit.csv")
hist(data$profit, main = "Histogram of profit", xlab = "Profit", ylab = "Frequency", col = "yellow", border = "black", breaks = 10)
hist(data$profit, main = "Histogram Doanh số bán hàng", xlab = "Doanh số (triệu đồng)", col = "yellow", border = "black", breaks = 10)
# Cau b:
# Tính trung bình và độ lệch chuẩn của doanh số bán trên 65 triệu đồng
mean_over_65 <- mean(data$profit[data$profit > 65000000])
sd_over_65 <- sd(data$profit[data$profit > 65000000])
# Số lượng quan sát và độ tin cậy
n <- length(data$profit[data$profit > 65000000])
confidence_level <- 0.99
# Tính khoảng tin cậy cho trung bình
margin_of_error <- qt((1 + confidence_level) / 2, df = n - 1) * (sd_over_65 / sqrt(n))
confidence_interval <- c(mean_over_65 - margin_of_error, mean_over_65 + margin_of_error)
cat("Doanh số bán trung bình của một ngày 'bán đắt hàng' là:", mean_over_65, "triệu đồng\n")
cat("Khoảng tin cậy 99% là:", confidence_interval, "triệu đồng\n")
confidence_interval <- c(mean_over_65 - margin_of_error, mean_over_65 + margin_of_error)
# Cau b:
# Tính trung bình và độ lệch chuẩn của doanh số bán trên 65 triệu đồng
mean_over_65 <- mean(data$profit[data$profit > 65000000])
sd_over_65 <- sd(data$profit[data$profit > 65000000])
# Số lượng quan sát và độ tin cậy
n <- length(data$profit[data$profit > 65000000])
confidence_level <- 0.99
# Tính khoảng tin cậy cho trung bình
margin_of_error <- qt((1 + confidence_level) / 2, df = n - 1) * (sd_over_65 / sqrt(n))
confidence_interval <- c(mean_over_65 - margin_of_error, mean_over_65 + margin_of_error)
cat("Doanh số bán trung bình của một ngày 'bán đắt hàng' là:", mean_over_65, "triệu đồng\n")
cat("Khoảng tin cậy 99% là:", confidence_interval, "triệu đồng\n")
# Cau b:
# Tính trung bình và độ lệch chuẩn của doanh số bán trên 65 triệu đồng
mean_over_65 <- mean(data$profit[data$profit > 65000000])
sd_over_65 <- sd(data$profit[data$profit > 65000000])
# Số lượng quan sát và độ tin cậy
n <- length(data$profit[data$profit > 65000000])
confidence_level <- 0.99
# Tính khoảng tin cậy cho trung bình
margin_of_error <- qt((1 + confidence_level) / 2, df = n - 1) * (sd_over_65 / sqrt(n))
# Cau b:
# Tính trung bình và độ lệch chuẩn của doanh số bán trên 65 triệu đồng
mean_over_65 <- mean(data$profit[data$profit > 65])
sd_over_65 <- sd(data$profit[data$profit > 65])
# Số lượng quan sát và độ tin cậy
n <- length(data$profit[data$profit > 65])
confidence_level <- 0.99
# Tính khoảng tin cậy cho trung bình
margin_of_error <- qt((1 + confidence_level) / 2, df = n - 1) * (sd_over_65 / sqrt(n))
confidence_interval <- c(mean_over_65 - margin_of_error, mean_over_65 + margin_of_error)
cat("Doanh số bán trung bình của một ngày 'bán đắt hàng' là:", mean_over_65, "triệu đồng\n")
cat("Khoảng tin cậy 99% là:", confidence_interval, "triệu đồng\n")
# ------------------ Câu C ------------------
# Tính trung bình doanh số bán trước khi áp dụng phương thức mới
mean_before <- 60
# Kiểm tra ý nghĩa thống kê với kiểm định t-test
t_test_result <- t.test(data$profit, mu = mean_before)
# In kết quả kiểm định
cat("Giá trị p của kiểm định t là:", t_test_result$p.value, "\n")
# So sánh ý nghĩa thống kê với mức ý nghĩa 1%
if (t_test_result$p.value < 0.01) {
cat("Có ý nghĩa thống kê, phương thức bán hàng mới hiệu quả hơn.\n")
} else {
cat("Không có ý nghĩa thống kê, không đủ chứng cứ để kết luận phương thức mới hiệu quả hơn.\n")
}
# ------------------ Câu A ------------------
# Số liệu ban đầu
xi <- c(5, 6, 7, 8, 9, 10)
ni <- c(5, 10, 15, 20, 12, 8)
# Biến đổi số liệu
data <- rep(xi, times = ni)
# Vẽ biểu đồ stem & leaf
stem(data)
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "greater", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ > μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
# ------------------ Câu B ------------------
test.geq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "greater", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ > μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H1: μ > 8
test.geq.oneside(data, mu0 = 8, alpha = 0.05)
# Áp dụng hàm để kiểm định H1: μ < 8
test.leq.oneside(data, mu0 = 8, alpha = 0.05)
# Áp dụng hàm để kiểm định H1: μ < 8
test.leq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu C ------------------
test.leq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "less", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ < μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# ------------------ Câu B ------------------
test.geq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "greater", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ > μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H1: μ > 8
test.geq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu C ------------------
test.leq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "less", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ < μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H1: μ < 8
test.leq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu B ------------------
test.geq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "greater", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H0: μ =", mu0, "\n")
cat("Kiểm định giả thuyết H1: μ > μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H0: μ = 8 và H1: μ > 8
test.geq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu C ------------------
test.leq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "less", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H1: μ < μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H1: μ < 8
test.leq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu B ------------------
test.geq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "greater", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H0: μ =", mu0, "\n")
cat("Kiểm định giả thuyết H1: μ > μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H0: μ = 8 và H1: μ > 8
test.geq.oneside(data, mu0 = 8, alpha = 0.05)
# ------------------ Câu C ------------------
test.leq.oneside <- function(x, mu0, alpha) {
# Thực hiện kiểm định
result <- t.test(x, mu = mu0, alternative = "less", conf.level = 1 - alpha)
# In kết quả
cat("Kiểm định giả thuyết H0: μ =", mu0, "\n")
cat("Kiểm định giả thuyết H1: μ < μ0\n")
cat("Kết luận:", ifelse(result$p.value < alpha, "Bác bỏ H0", "Không đủ chứng cứ để bác bỏ H0"), "\n")
cat("p - giá trị:", result$p.value, "\n")
}
# Áp dụng hàm để kiểm định H0: μ = 8 và H1: μ < 8
test.leq.oneside(data, mu0 = 8, alpha = 0.05)
# Đọc dữ liệu từ file
data <- read.table("./datasets/teen-birth-rate-2002.txt", header = TRUE, na.strings = "NA")
# Tính trung bình mẫu, độ lệch chuẩn và cỡ mẫu cho từng nhóm
means <- apply(data[, -1], 2, mean, na.rm = TRUE)
sds <- apply(data[, -1], 2, sd, na.rm = TRUE)
ns <- apply(!is.na(data[, -1]), 2, sum)
# Read data from file
data <- read.table("teen-birth-rate-2002.txt", header = TRUE, na.strings = "NA")
# Tính trung bình mẫu, độ lệch chuẩn và cỡ mẫu cho từng nhóm
means <- apply(data[, c("White", "Black", "Hispanic")], 2, mean, na.rm = TRUE)
sds <- apply(data[, c("White", "Black", "Hispanic")], 2, sd, na.rm = TRUE)
ns <- apply(!is.na(data[, c("White", "Black", "Hispanic")]), 2, sum)
# Read data from file
data <- read.table("./datasets/teen-birth-rate-2002.txt", header = TRUE, na.strings = "NA")
# Đọc dữ liệu từ file
data <- read.table("./datasets/teen-birth-rate-2002.txt", header = TRUE, na.strings = "NA")
